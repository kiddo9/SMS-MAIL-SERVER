// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "server/proto/FileUpload.proto" (package "fileUpload", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message fileUpload.fileUploadRequest
 */
export interface fileUploadRequest {
    /**
     * @generated from protobuf field: bytes Content = 1
     */
    content: Uint8Array;
    /**
     * @generated from protobuf field: string Date = 2
     */
    date: string;
}
/**
 * @generated from protobuf message fileUpload.fileUploadResponse
 */
export interface fileUploadResponse {
    /**
     * @generated from protobuf field: bool Status = 1
     */
    status: boolean;
    /**
     * @generated from protobuf field: string Message = 2
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class fileUploadRequest$Type extends MessageType<fileUploadRequest> {
    constructor() {
        super("fileUpload.fileUploadRequest", [
            { no: 1, name: "Content", kind: "scalar", jsonName: "Content", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "Date", kind: "scalar", jsonName: "Date", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<fileUploadRequest>): fileUploadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.content = new Uint8Array(0);
        message.date = "";
        if (value !== undefined)
            reflectionMergePartial<fileUploadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: fileUploadRequest): fileUploadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes Content */ 1:
                    message.content = reader.bytes();
                    break;
                case /* string Date */ 2:
                    message.date = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: fileUploadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes Content = 1; */
        if (message.content.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.content);
        /* string Date = 2; */
        if (message.date !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fileUpload.fileUploadRequest
 */
export const fileUploadRequest = new fileUploadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class fileUploadResponse$Type extends MessageType<fileUploadResponse> {
    constructor() {
        super("fileUpload.fileUploadResponse", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<fileUploadResponse>): fileUploadResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<fileUploadResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: fileUploadResponse): fileUploadResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool Status */ 1:
                    message.status = reader.bool();
                    break;
                case /* string Message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: fileUploadResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool Status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        /* string Message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fileUpload.fileUploadResponse
 */
export const fileUploadResponse = new fileUploadResponse$Type();
/**
 * @generated ServiceType for protobuf service fileUpload.fileUploadServices
 */
export const fileUploadServices = new ServiceType("fileUpload.fileUploadServices", [
    { name: "FileUpload", options: {}, I: fileUploadRequest, O: fileUploadResponse }
]);
