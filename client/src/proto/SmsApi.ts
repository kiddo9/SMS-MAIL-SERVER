// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "server/proto/SmsApi.proto" (package "admin", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message admin.EbulkSms
 */
export interface EbulkSms {
}
/**
 * @generated from protobuf message admin.BulkSms
 */
export interface BulkSms {
}
/**
 * @generated from protobuf message admin.EbulkSmsResponse
 */
export interface EbulkSmsResponse {
    /**
     * @generated from protobuf field: string response = 1
     */
    response: string;
}
/**
 * @generated from protobuf message admin.BulkSmsResponse
 */
export interface BulkSmsResponse {
    /**
     * @generated from protobuf field: string response = 1
     */
    response: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class EbulkSms$Type extends MessageType<EbulkSms> {
    constructor() {
        super("admin.EbulkSms", []);
    }
    create(value?: PartialMessage<EbulkSms>): EbulkSms {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EbulkSms>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EbulkSms): EbulkSms {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EbulkSms, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message admin.EbulkSms
 */
export const EbulkSms = new EbulkSms$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkSms$Type extends MessageType<BulkSms> {
    constructor() {
        super("admin.BulkSms", []);
    }
    create(value?: PartialMessage<BulkSms>): BulkSms {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BulkSms>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSms): BulkSms {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkSms, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message admin.BulkSms
 */
export const BulkSms = new BulkSms$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EbulkSmsResponse$Type extends MessageType<EbulkSmsResponse> {
    constructor() {
        super("admin.EbulkSmsResponse", [
            { no: 1, name: "response", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EbulkSmsResponse>): EbulkSmsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = "";
        if (value !== undefined)
            reflectionMergePartial<EbulkSmsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EbulkSmsResponse): EbulkSmsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string response */ 1:
                    message.response = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EbulkSmsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string response = 1; */
        if (message.response !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message admin.EbulkSmsResponse
 */
export const EbulkSmsResponse = new EbulkSmsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkSmsResponse$Type extends MessageType<BulkSmsResponse> {
    constructor() {
        super("admin.BulkSmsResponse", [
            { no: 1, name: "response", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BulkSmsResponse>): BulkSmsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = "";
        if (value !== undefined)
            reflectionMergePartial<BulkSmsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSmsResponse): BulkSmsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string response */ 1:
                    message.response = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkSmsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string response = 1; */
        if (message.response !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message admin.BulkSmsResponse
 */
export const BulkSmsResponse = new BulkSmsResponse$Type();
/**
 * @generated ServiceType for protobuf service admin.SmsServices
 */
export const SmsServices = new ServiceType("admin.SmsServices", [
    { name: "EbulkSmsWallet", serverStreaming: true, options: {}, I: EbulkSms, O: EbulkSmsResponse },
    { name: "BulkSmsWallet", serverStreaming: true, options: {}, I: BulkSms, O: BulkSmsResponse }
]);
