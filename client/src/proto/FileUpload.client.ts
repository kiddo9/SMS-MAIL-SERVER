// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "server/proto/FileUpload.proto" (package "fileUpload", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { fileUploadServices } from "./FileUpload";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { fileUploadResponse } from "./FileUpload";
import type { fileUploadRequest } from "./FileUpload";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service fileUpload.fileUploadServices
 */
export interface IfileUploadServicesClient {
    /**
     * @generated from protobuf rpc: FileUpload
     */
    fileUpload(input: fileUploadRequest, options?: RpcOptions): UnaryCall<fileUploadRequest, fileUploadResponse>;
}
/**
 * @generated from protobuf service fileUpload.fileUploadServices
 */
export class fileUploadServicesClient implements IfileUploadServicesClient, ServiceInfo {
    typeName = fileUploadServices.typeName;
    methods = fileUploadServices.methods;
    options = fileUploadServices.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: FileUpload
     */
    fileUpload(input: fileUploadRequest, options?: RpcOptions): UnaryCall<fileUploadRequest, fileUploadResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<fileUploadRequest, fileUploadResponse>("unary", this._transport, method, opt, input);
    }
}
