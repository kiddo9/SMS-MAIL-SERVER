// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "server/proto/Template.proto" (package "Templates", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Templates.Template
 */
export interface Template {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string TemplateName = 2
     */
    templateName: string;
    /**
     * @generated from protobuf field: string TemplateContent = 3
     */
    templateContent: string;
    /**
     * @generated from protobuf field: string Date = 4
     */
    date: string;
}
/**
 * @generated from protobuf message Templates.SmsTemplate
 */
export interface SmsTemplate {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string SmsTemplateName = 2
     */
    smsTemplateName: string;
    /**
     * @generated from protobuf field: string SmsTemplateContent = 3
     */
    smsTemplateContent: string;
    /**
     * @generated from protobuf field: string Date = 4
     */
    date: string;
}
/**
 * @generated from protobuf message Templates.Response
 */
export interface Response {
    /**
     * @generated from protobuf field: bool Status = 1
     */
    status: boolean;
    /**
     * @generated from protobuf field: string Message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message Templates.TemplateRequest
 */
export interface TemplateRequest {
    /**
     * @generated from protobuf field: string TemplateName = 1
     */
    templateName: string;
    /**
     * @generated from protobuf field: string TemplateContent = 2
     */
    templateContent: string;
    /**
     * @generated from protobuf field: string Date = 3
     */
    date: string;
}
/**
 * @generated from protobuf message Templates.SmsTemplateRequest
 */
export interface SmsTemplateRequest {
    /**
     * @generated from protobuf field: string SmsTemplateName = 1
     */
    smsTemplateName: string;
    /**
     * @generated from protobuf field: string SmsTemplateContent = 2
     */
    smsTemplateContent: string;
    /**
     * @generated from protobuf field: string Date = 3
     */
    date: string;
}
/**
 * @generated from protobuf message Templates.GetATemplateRequest
 */
export interface GetATemplateRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message Templates.GetATemplateResponse
 */
export interface GetATemplateResponse {
    /**
     * @generated from protobuf field: Templates.Template template = 1
     */
    template?: Template;
}
/**
 * @generated from protobuf message Templates.GetAnSmsTemplateRequest
 */
export interface GetAnSmsTemplateRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message Templates.GetAnSmsTemplateResponse
 */
export interface GetAnSmsTemplateResponse {
    /**
     * @generated from protobuf field: Templates.SmsTemplate smsTemplate = 1
     */
    smsTemplate?: SmsTemplate;
}
/**
 * @generated from protobuf message Templates.TemplateEditRequest
 */
export interface TemplateEditRequest {
    /**
     * @generated from protobuf field: Templates.Template template = 1
     */
    template?: Template;
}
/**
 * @generated from protobuf message Templates.SmsTemplateEditRequest
 */
export interface SmsTemplateEditRequest {
    /**
     * @generated from protobuf field: Templates.SmsTemplate smstemplate = 1
     */
    smstemplate?: SmsTemplate;
}
/**
 * @generated from protobuf message Templates.TemplateFetchRequest
 */
export interface TemplateFetchRequest {
}
/**
 * @generated from protobuf message Templates.TemplateFetchResponse
 */
export interface TemplateFetchResponse {
    /**
     * @generated from protobuf field: Templates.Template emailTemplate = 1
     */
    emailTemplate?: Template;
    /**
     * @generated from protobuf field: Templates.SmsTemplate smsTemplate = 2
     */
    smsTemplate?: SmsTemplate;
}
// @generated message type with reflection information, may provide speed optimized methods
class Template$Type extends MessageType<Template> {
    constructor() {
        super("Templates.Template", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "TemplateName", kind: "scalar", jsonName: "TemplateName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "TemplateContent", kind: "scalar", jsonName: "TemplateContent", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Date", kind: "scalar", jsonName: "Date", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Template>): Template {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.templateName = "";
        message.templateContent = "";
        message.date = "";
        if (value !== undefined)
            reflectionMergePartial<Template>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Template): Template {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string TemplateName */ 2:
                    message.templateName = reader.string();
                    break;
                case /* string TemplateContent */ 3:
                    message.templateContent = reader.string();
                    break;
                case /* string Date */ 4:
                    message.date = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Template, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string TemplateName = 2; */
        if (message.templateName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.templateName);
        /* string TemplateContent = 3; */
        if (message.templateContent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.templateContent);
        /* string Date = 4; */
        if (message.date !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.Template
 */
export const Template = new Template$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SmsTemplate$Type extends MessageType<SmsTemplate> {
    constructor() {
        super("Templates.SmsTemplate", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "SmsTemplateName", kind: "scalar", jsonName: "SmsTemplateName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "SmsTemplateContent", kind: "scalar", jsonName: "SmsTemplateContent", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Date", kind: "scalar", jsonName: "Date", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SmsTemplate>): SmsTemplate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.smsTemplateName = "";
        message.smsTemplateContent = "";
        message.date = "";
        if (value !== undefined)
            reflectionMergePartial<SmsTemplate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmsTemplate): SmsTemplate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string SmsTemplateName */ 2:
                    message.smsTemplateName = reader.string();
                    break;
                case /* string SmsTemplateContent */ 3:
                    message.smsTemplateContent = reader.string();
                    break;
                case /* string Date */ 4:
                    message.date = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SmsTemplate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string SmsTemplateName = 2; */
        if (message.smsTemplateName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.smsTemplateName);
        /* string SmsTemplateContent = 3; */
        if (message.smsTemplateContent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.smsTemplateContent);
        /* string Date = 4; */
        if (message.date !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.SmsTemplate
 */
export const SmsTemplate = new SmsTemplate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType<Response> {
    constructor() {
        super("Templates.Response", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Response>): Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool Status */ 1:
                    message.status = reader.bool();
                    break;
                case /* string Message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool Status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        /* string Message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.Response
 */
export const Response = new Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateRequest$Type extends MessageType<TemplateRequest> {
    constructor() {
        super("Templates.TemplateRequest", [
            { no: 1, name: "TemplateName", kind: "scalar", jsonName: "TemplateName", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "TemplateContent", kind: "scalar", jsonName: "TemplateContent", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Date", kind: "scalar", jsonName: "Date", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TemplateRequest>): TemplateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.templateName = "";
        message.templateContent = "";
        message.date = "";
        if (value !== undefined)
            reflectionMergePartial<TemplateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateRequest): TemplateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string TemplateName */ 1:
                    message.templateName = reader.string();
                    break;
                case /* string TemplateContent */ 2:
                    message.templateContent = reader.string();
                    break;
                case /* string Date */ 3:
                    message.date = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string TemplateName = 1; */
        if (message.templateName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.templateName);
        /* string TemplateContent = 2; */
        if (message.templateContent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.templateContent);
        /* string Date = 3; */
        if (message.date !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.TemplateRequest
 */
export const TemplateRequest = new TemplateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SmsTemplateRequest$Type extends MessageType<SmsTemplateRequest> {
    constructor() {
        super("Templates.SmsTemplateRequest", [
            { no: 1, name: "SmsTemplateName", kind: "scalar", jsonName: "SmsTemplateName", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "SmsTemplateContent", kind: "scalar", jsonName: "SmsTemplateContent", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Date", kind: "scalar", jsonName: "Date", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SmsTemplateRequest>): SmsTemplateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.smsTemplateName = "";
        message.smsTemplateContent = "";
        message.date = "";
        if (value !== undefined)
            reflectionMergePartial<SmsTemplateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmsTemplateRequest): SmsTemplateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string SmsTemplateName */ 1:
                    message.smsTemplateName = reader.string();
                    break;
                case /* string SmsTemplateContent */ 2:
                    message.smsTemplateContent = reader.string();
                    break;
                case /* string Date */ 3:
                    message.date = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SmsTemplateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string SmsTemplateName = 1; */
        if (message.smsTemplateName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.smsTemplateName);
        /* string SmsTemplateContent = 2; */
        if (message.smsTemplateContent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.smsTemplateContent);
        /* string Date = 3; */
        if (message.date !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.SmsTemplateRequest
 */
export const SmsTemplateRequest = new SmsTemplateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetATemplateRequest$Type extends MessageType<GetATemplateRequest> {
    constructor() {
        super("Templates.GetATemplateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetATemplateRequest>): GetATemplateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetATemplateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetATemplateRequest): GetATemplateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetATemplateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.GetATemplateRequest
 */
export const GetATemplateRequest = new GetATemplateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetATemplateResponse$Type extends MessageType<GetATemplateResponse> {
    constructor() {
        super("Templates.GetATemplateResponse", [
            { no: 1, name: "template", kind: "message", T: () => Template }
        ]);
    }
    create(value?: PartialMessage<GetATemplateResponse>): GetATemplateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetATemplateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetATemplateResponse): GetATemplateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Templates.Template template */ 1:
                    message.template = Template.internalBinaryRead(reader, reader.uint32(), options, message.template);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetATemplateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Templates.Template template = 1; */
        if (message.template)
            Template.internalBinaryWrite(message.template, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.GetATemplateResponse
 */
export const GetATemplateResponse = new GetATemplateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAnSmsTemplateRequest$Type extends MessageType<GetAnSmsTemplateRequest> {
    constructor() {
        super("Templates.GetAnSmsTemplateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAnSmsTemplateRequest>): GetAnSmsTemplateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetAnSmsTemplateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAnSmsTemplateRequest): GetAnSmsTemplateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAnSmsTemplateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.GetAnSmsTemplateRequest
 */
export const GetAnSmsTemplateRequest = new GetAnSmsTemplateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAnSmsTemplateResponse$Type extends MessageType<GetAnSmsTemplateResponse> {
    constructor() {
        super("Templates.GetAnSmsTemplateResponse", [
            { no: 1, name: "smsTemplate", kind: "message", T: () => SmsTemplate }
        ]);
    }
    create(value?: PartialMessage<GetAnSmsTemplateResponse>): GetAnSmsTemplateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAnSmsTemplateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAnSmsTemplateResponse): GetAnSmsTemplateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Templates.SmsTemplate smsTemplate */ 1:
                    message.smsTemplate = SmsTemplate.internalBinaryRead(reader, reader.uint32(), options, message.smsTemplate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAnSmsTemplateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Templates.SmsTemplate smsTemplate = 1; */
        if (message.smsTemplate)
            SmsTemplate.internalBinaryWrite(message.smsTemplate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.GetAnSmsTemplateResponse
 */
export const GetAnSmsTemplateResponse = new GetAnSmsTemplateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateEditRequest$Type extends MessageType<TemplateEditRequest> {
    constructor() {
        super("Templates.TemplateEditRequest", [
            { no: 1, name: "template", kind: "message", T: () => Template }
        ]);
    }
    create(value?: PartialMessage<TemplateEditRequest>): TemplateEditRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TemplateEditRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateEditRequest): TemplateEditRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Templates.Template template */ 1:
                    message.template = Template.internalBinaryRead(reader, reader.uint32(), options, message.template);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateEditRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Templates.Template template = 1; */
        if (message.template)
            Template.internalBinaryWrite(message.template, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.TemplateEditRequest
 */
export const TemplateEditRequest = new TemplateEditRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SmsTemplateEditRequest$Type extends MessageType<SmsTemplateEditRequest> {
    constructor() {
        super("Templates.SmsTemplateEditRequest", [
            { no: 1, name: "smstemplate", kind: "message", T: () => SmsTemplate }
        ]);
    }
    create(value?: PartialMessage<SmsTemplateEditRequest>): SmsTemplateEditRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SmsTemplateEditRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmsTemplateEditRequest): SmsTemplateEditRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Templates.SmsTemplate smstemplate */ 1:
                    message.smstemplate = SmsTemplate.internalBinaryRead(reader, reader.uint32(), options, message.smstemplate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SmsTemplateEditRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Templates.SmsTemplate smstemplate = 1; */
        if (message.smstemplate)
            SmsTemplate.internalBinaryWrite(message.smstemplate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.SmsTemplateEditRequest
 */
export const SmsTemplateEditRequest = new SmsTemplateEditRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateFetchRequest$Type extends MessageType<TemplateFetchRequest> {
    constructor() {
        super("Templates.TemplateFetchRequest", []);
    }
    create(value?: PartialMessage<TemplateFetchRequest>): TemplateFetchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TemplateFetchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateFetchRequest): TemplateFetchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateFetchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.TemplateFetchRequest
 */
export const TemplateFetchRequest = new TemplateFetchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateFetchResponse$Type extends MessageType<TemplateFetchResponse> {
    constructor() {
        super("Templates.TemplateFetchResponse", [
            { no: 1, name: "emailTemplate", kind: "message", T: () => Template },
            { no: 2, name: "smsTemplate", kind: "message", T: () => SmsTemplate }
        ]);
    }
    create(value?: PartialMessage<TemplateFetchResponse>): TemplateFetchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TemplateFetchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateFetchResponse): TemplateFetchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Templates.Template emailTemplate */ 1:
                    message.emailTemplate = Template.internalBinaryRead(reader, reader.uint32(), options, message.emailTemplate);
                    break;
                case /* Templates.SmsTemplate smsTemplate */ 2:
                    message.smsTemplate = SmsTemplate.internalBinaryRead(reader, reader.uint32(), options, message.smsTemplate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateFetchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Templates.Template emailTemplate = 1; */
        if (message.emailTemplate)
            Template.internalBinaryWrite(message.emailTemplate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Templates.SmsTemplate smsTemplate = 2; */
        if (message.smsTemplate)
            SmsTemplate.internalBinaryWrite(message.smsTemplate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Templates.TemplateFetchResponse
 */
export const TemplateFetchResponse = new TemplateFetchResponse$Type();
/**
 * @generated ServiceType for protobuf service Templates.TemplateServices
 */
export const TemplateServices = new ServiceType("Templates.TemplateServices", [
    { name: "CreateEmailTemplate", options: {}, I: TemplateRequest, O: Response },
    { name: "CreateSmsTemplate", options: {}, I: SmsTemplateRequest, O: Response },
    { name: "AllTemplates", serverStreaming: true, options: {}, I: TemplateFetchRequest, O: TemplateFetchResponse },
    { name: "EditEmailTemplate", options: {}, I: TemplateEditRequest, O: Response },
    { name: "EditSmsTemplate", options: {}, I: SmsTemplateEditRequest, O: Response },
    { name: "GetEmailTemplateById", options: {}, I: GetATemplateRequest, O: GetATemplateResponse },
    { name: "GetSmsTemplateById", options: {}, I: GetAnSmsTemplateRequest, O: GetAnSmsTemplateResponse }
]);
