// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "server/proto/Admin.proto" (package "admin", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AdminService } from "./Admin";
import type { TokenValidationResponse } from "./Admin";
import type { TokenValidationRequest } from "./Admin";
import type { DeleteAdminResponse } from "./Admin";
import type { DeleteAdminRequest } from "./Admin";
import type { AdminUpdateResponse } from "./Admin";
import type { AdminUpdateRequest } from "./Admin";
import type { GetASpecificAdminResponse } from "./Admin";
import type { GetASpecificAdminRequest } from "./Admin";
import type { OtpVerificationResponse } from "./Admin";
import type { OtpVerificationRequest } from "./Admin";
import type { OtpResponse } from "./Admin";
import type { OtpRequest } from "./Admin";
import type { ValidateAdminResponse } from "./Admin";
import type { GetAndValidateAdminRequest } from "./Admin";
import type { Admin } from "./Admin";
import type { AllAdmins } from "./Admin";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateAdminUserResponse } from "./Admin";
import type { CreateAdminUserRequest } from "./Admin";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service admin.AdminService
 */
export interface IAdminServiceClient {
    /**
     * @generated from protobuf rpc: CreateAdmin
     */
    createAdmin(input: CreateAdminUserRequest, options?: RpcOptions): UnaryCall<CreateAdminUserRequest, CreateAdminUserResponse>;
    /**
     * @generated from protobuf rpc: GetAllAdmins
     */
    getAllAdmins(input: AllAdmins, options?: RpcOptions): ServerStreamingCall<AllAdmins, Admin>;
    /**
     * @generated from protobuf rpc: ValidateAdmin
     */
    validateAdmin(input: GetAndValidateAdminRequest, options?: RpcOptions): UnaryCall<GetAndValidateAdminRequest, ValidateAdminResponse>;
    /**
     * @generated from protobuf rpc: SendOtp
     */
    sendOtp(input: OtpRequest, options?: RpcOptions): UnaryCall<OtpRequest, OtpResponse>;
    /**
     * @generated from protobuf rpc: VerifyOtp
     */
    verifyOtp(input: OtpVerificationRequest, options?: RpcOptions): UnaryCall<OtpVerificationRequest, OtpVerificationResponse>;
    /**
     * @generated from protobuf rpc: LoginAdmin
     */
    loginAdmin(input: OtpRequest, options?: RpcOptions): UnaryCall<OtpRequest, OtpResponse>;
    /**
     * @generated from protobuf rpc: GetSpecificAdmin
     */
    getSpecificAdmin(input: GetASpecificAdminRequest, options?: RpcOptions): UnaryCall<GetASpecificAdminRequest, GetASpecificAdminResponse>;
    /**
     * @generated from protobuf rpc: UpdateAdmin
     */
    updateAdmin(input: AdminUpdateRequest, options?: RpcOptions): UnaryCall<AdminUpdateRequest, AdminUpdateResponse>;
    /**
     * @generated from protobuf rpc: DeleteAdmin
     */
    deleteAdmin(input: DeleteAdminRequest, options?: RpcOptions): UnaryCall<DeleteAdminRequest, DeleteAdminResponse>;
    /**
     * @generated from protobuf rpc: ValidateToken
     */
    validateToken(input: TokenValidationRequest, options?: RpcOptions): UnaryCall<TokenValidationRequest, TokenValidationResponse>;
}
/**
 * @generated from protobuf service admin.AdminService
 */
export class AdminServiceClient implements IAdminServiceClient, ServiceInfo {
    typeName = AdminService.typeName;
    methods = AdminService.methods;
    options = AdminService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateAdmin
     */
    createAdmin(input: CreateAdminUserRequest, options?: RpcOptions): UnaryCall<CreateAdminUserRequest, CreateAdminUserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateAdminUserRequest, CreateAdminUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllAdmins
     */
    getAllAdmins(input: AllAdmins, options?: RpcOptions): ServerStreamingCall<AllAdmins, Admin> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AllAdmins, Admin>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ValidateAdmin
     */
    validateAdmin(input: GetAndValidateAdminRequest, options?: RpcOptions): UnaryCall<GetAndValidateAdminRequest, ValidateAdminResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAndValidateAdminRequest, ValidateAdminResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendOtp
     */
    sendOtp(input: OtpRequest, options?: RpcOptions): UnaryCall<OtpRequest, OtpResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<OtpRequest, OtpResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VerifyOtp
     */
    verifyOtp(input: OtpVerificationRequest, options?: RpcOptions): UnaryCall<OtpVerificationRequest, OtpVerificationResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<OtpVerificationRequest, OtpVerificationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LoginAdmin
     */
    loginAdmin(input: OtpRequest, options?: RpcOptions): UnaryCall<OtpRequest, OtpResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<OtpRequest, OtpResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSpecificAdmin
     */
    getSpecificAdmin(input: GetASpecificAdminRequest, options?: RpcOptions): UnaryCall<GetASpecificAdminRequest, GetASpecificAdminResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetASpecificAdminRequest, GetASpecificAdminResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateAdmin
     */
    updateAdmin(input: AdminUpdateRequest, options?: RpcOptions): UnaryCall<AdminUpdateRequest, AdminUpdateResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<AdminUpdateRequest, AdminUpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteAdmin
     */
    deleteAdmin(input: DeleteAdminRequest, options?: RpcOptions): UnaryCall<DeleteAdminRequest, DeleteAdminResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteAdminRequest, DeleteAdminResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ValidateToken
     */
    validateToken(input: TokenValidationRequest, options?: RpcOptions): UnaryCall<TokenValidationRequest, TokenValidationResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<TokenValidationRequest, TokenValidationResponse>("unary", this._transport, method, opt, input);
    }
}
