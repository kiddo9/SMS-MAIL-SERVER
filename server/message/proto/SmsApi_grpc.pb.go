// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/SmsApi.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SmsServices_EbulkSmsWallet_FullMethodName = "/admin.SmsServices/EbulkSmsWallet"
	SmsServices_BulkSmsWallet_FullMethodName  = "/admin.SmsServices/BulkSmsWallet"
)

// SmsServicesClient is the client API for SmsServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmsServicesClient interface {
	EbulkSmsWallet(ctx context.Context, in *EbulkSms, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EbulkSmsResponse], error)
	BulkSmsWallet(ctx context.Context, in *BulkSms, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BulkSmsResponse], error)
}

type smsServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsServicesClient(cc grpc.ClientConnInterface) SmsServicesClient {
	return &smsServicesClient{cc}
}

func (c *smsServicesClient) EbulkSmsWallet(ctx context.Context, in *EbulkSms, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EbulkSmsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SmsServices_ServiceDesc.Streams[0], SmsServices_EbulkSmsWallet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EbulkSms, EbulkSmsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmsServices_EbulkSmsWalletClient = grpc.ServerStreamingClient[EbulkSmsResponse]

func (c *smsServicesClient) BulkSmsWallet(ctx context.Context, in *BulkSms, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BulkSmsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SmsServices_ServiceDesc.Streams[1], SmsServices_BulkSmsWallet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BulkSms, BulkSmsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmsServices_BulkSmsWalletClient = grpc.ServerStreamingClient[BulkSmsResponse]

// SmsServicesServer is the server API for SmsServices service.
// All implementations must embed UnimplementedSmsServicesServer
// for forward compatibility.
type SmsServicesServer interface {
	EbulkSmsWallet(*EbulkSms, grpc.ServerStreamingServer[EbulkSmsResponse]) error
	BulkSmsWallet(*BulkSms, grpc.ServerStreamingServer[BulkSmsResponse]) error
	mustEmbedUnimplementedSmsServicesServer()
}

// UnimplementedSmsServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmsServicesServer struct{}

func (UnimplementedSmsServicesServer) EbulkSmsWallet(*EbulkSms, grpc.ServerStreamingServer[EbulkSmsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EbulkSmsWallet not implemented")
}
func (UnimplementedSmsServicesServer) BulkSmsWallet(*BulkSms, grpc.ServerStreamingServer[BulkSmsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BulkSmsWallet not implemented")
}
func (UnimplementedSmsServicesServer) mustEmbedUnimplementedSmsServicesServer() {}
func (UnimplementedSmsServicesServer) testEmbeddedByValue()                     {}

// UnsafeSmsServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsServicesServer will
// result in compilation errors.
type UnsafeSmsServicesServer interface {
	mustEmbedUnimplementedSmsServicesServer()
}

func RegisterSmsServicesServer(s grpc.ServiceRegistrar, srv SmsServicesServer) {
	// If the following call pancis, it indicates UnimplementedSmsServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SmsServices_ServiceDesc, srv)
}

func _SmsServices_EbulkSmsWallet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EbulkSms)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmsServicesServer).EbulkSmsWallet(m, &grpc.GenericServerStream[EbulkSms, EbulkSmsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmsServices_EbulkSmsWalletServer = grpc.ServerStreamingServer[EbulkSmsResponse]

func _SmsServices_BulkSmsWallet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BulkSms)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmsServicesServer).BulkSmsWallet(m, &grpc.GenericServerStream[BulkSms, BulkSmsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SmsServices_BulkSmsWalletServer = grpc.ServerStreamingServer[BulkSmsResponse]

// SmsServices_ServiceDesc is the grpc.ServiceDesc for SmsServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmsServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.SmsServices",
	HandlerType: (*SmsServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EbulkSmsWallet",
			Handler:       _SmsServices_EbulkSmsWallet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkSmsWallet",
			Handler:       _SmsServices_BulkSmsWallet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/SmsApi.proto",
}
