// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/Template.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TemplateServices_CreateEmailTemplate_FullMethodName  = "/Templates.TemplateServices/CreateEmailTemplate"
	TemplateServices_CreateSmsTemplate_FullMethodName    = "/Templates.TemplateServices/CreateSmsTemplate"
	TemplateServices_AllTemplates_FullMethodName         = "/Templates.TemplateServices/AllTemplates"
	TemplateServices_EditEmailTemplate_FullMethodName    = "/Templates.TemplateServices/EditEmailTemplate"
	TemplateServices_EditSmsTemplate_FullMethodName      = "/Templates.TemplateServices/EditSmsTemplate"
	TemplateServices_GetEmailTemplateById_FullMethodName = "/Templates.TemplateServices/GetEmailTemplateById"
	TemplateServices_GetSmsTemplateById_FullMethodName   = "/Templates.TemplateServices/GetSmsTemplateById"
)

// TemplateServicesClient is the client API for TemplateServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateServicesClient interface {
	CreateEmailTemplate(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*Response, error)
	CreateSmsTemplate(ctx context.Context, in *SmsTemplateRequest, opts ...grpc.CallOption) (*Response, error)
	AllTemplates(ctx context.Context, in *TemplateFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TemplateFetchResponse], error)
	EditEmailTemplate(ctx context.Context, in *TemplateEditRequest, opts ...grpc.CallOption) (*Response, error)
	EditSmsTemplate(ctx context.Context, in *SmsTemplateEditRequest, opts ...grpc.CallOption) (*Response, error)
	GetEmailTemplateById(ctx context.Context, in *GetATemplateRequest, opts ...grpc.CallOption) (*GetATemplateResponse, error)
	GetSmsTemplateById(ctx context.Context, in *GetAnSmsTemplateRequest, opts ...grpc.CallOption) (*GetAnSmsTemplateResponse, error)
}

type templateServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateServicesClient(cc grpc.ClientConnInterface) TemplateServicesClient {
	return &templateServicesClient{cc}
}

func (c *templateServicesClient) CreateEmailTemplate(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, TemplateServices_CreateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServicesClient) CreateSmsTemplate(ctx context.Context, in *SmsTemplateRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, TemplateServices_CreateSmsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServicesClient) AllTemplates(ctx context.Context, in *TemplateFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TemplateFetchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TemplateServices_ServiceDesc.Streams[0], TemplateServices_AllTemplates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TemplateFetchRequest, TemplateFetchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TemplateServices_AllTemplatesClient = grpc.ServerStreamingClient[TemplateFetchResponse]

func (c *templateServicesClient) EditEmailTemplate(ctx context.Context, in *TemplateEditRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, TemplateServices_EditEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServicesClient) EditSmsTemplate(ctx context.Context, in *SmsTemplateEditRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, TemplateServices_EditSmsTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServicesClient) GetEmailTemplateById(ctx context.Context, in *GetATemplateRequest, opts ...grpc.CallOption) (*GetATemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetATemplateResponse)
	err := c.cc.Invoke(ctx, TemplateServices_GetEmailTemplateById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServicesClient) GetSmsTemplateById(ctx context.Context, in *GetAnSmsTemplateRequest, opts ...grpc.CallOption) (*GetAnSmsTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnSmsTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateServices_GetSmsTemplateById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateServicesServer is the server API for TemplateServices service.
// All implementations must embed UnimplementedTemplateServicesServer
// for forward compatibility.
type TemplateServicesServer interface {
	CreateEmailTemplate(context.Context, *TemplateRequest) (*Response, error)
	CreateSmsTemplate(context.Context, *SmsTemplateRequest) (*Response, error)
	AllTemplates(*TemplateFetchRequest, grpc.ServerStreamingServer[TemplateFetchResponse]) error
	EditEmailTemplate(context.Context, *TemplateEditRequest) (*Response, error)
	EditSmsTemplate(context.Context, *SmsTemplateEditRequest) (*Response, error)
	GetEmailTemplateById(context.Context, *GetATemplateRequest) (*GetATemplateResponse, error)
	GetSmsTemplateById(context.Context, *GetAnSmsTemplateRequest) (*GetAnSmsTemplateResponse, error)
	mustEmbedUnimplementedTemplateServicesServer()
}

// UnimplementedTemplateServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemplateServicesServer struct{}

func (UnimplementedTemplateServicesServer) CreateEmailTemplate(context.Context, *TemplateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailTemplate not implemented")
}
func (UnimplementedTemplateServicesServer) CreateSmsTemplate(context.Context, *SmsTemplateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmsTemplate not implemented")
}
func (UnimplementedTemplateServicesServer) AllTemplates(*TemplateFetchRequest, grpc.ServerStreamingServer[TemplateFetchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AllTemplates not implemented")
}
func (UnimplementedTemplateServicesServer) EditEmailTemplate(context.Context, *TemplateEditRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEmailTemplate not implemented")
}
func (UnimplementedTemplateServicesServer) EditSmsTemplate(context.Context, *SmsTemplateEditRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSmsTemplate not implemented")
}
func (UnimplementedTemplateServicesServer) GetEmailTemplateById(context.Context, *GetATemplateRequest) (*GetATemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTemplateById not implemented")
}
func (UnimplementedTemplateServicesServer) GetSmsTemplateById(context.Context, *GetAnSmsTemplateRequest) (*GetAnSmsTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsTemplateById not implemented")
}
func (UnimplementedTemplateServicesServer) mustEmbedUnimplementedTemplateServicesServer() {}
func (UnimplementedTemplateServicesServer) testEmbeddedByValue()                          {}

// UnsafeTemplateServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateServicesServer will
// result in compilation errors.
type UnsafeTemplateServicesServer interface {
	mustEmbedUnimplementedTemplateServicesServer()
}

func RegisterTemplateServicesServer(s grpc.ServiceRegistrar, srv TemplateServicesServer) {
	// If the following call pancis, it indicates UnimplementedTemplateServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TemplateServices_ServiceDesc, srv)
}

func _TemplateServices_CreateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServicesServer).CreateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateServices_CreateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServicesServer).CreateEmailTemplate(ctx, req.(*TemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateServices_CreateSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServicesServer).CreateSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateServices_CreateSmsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServicesServer).CreateSmsTemplate(ctx, req.(*SmsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateServices_AllTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TemplateFetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplateServicesServer).AllTemplates(m, &grpc.GenericServerStream[TemplateFetchRequest, TemplateFetchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TemplateServices_AllTemplatesServer = grpc.ServerStreamingServer[TemplateFetchResponse]

func _TemplateServices_EditEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServicesServer).EditEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateServices_EditEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServicesServer).EditEmailTemplate(ctx, req.(*TemplateEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateServices_EditSmsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsTemplateEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServicesServer).EditSmsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateServices_EditSmsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServicesServer).EditSmsTemplate(ctx, req.(*SmsTemplateEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateServices_GetEmailTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetATemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServicesServer).GetEmailTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateServices_GetEmailTemplateById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServicesServer).GetEmailTemplateById(ctx, req.(*GetATemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateServices_GetSmsTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnSmsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServicesServer).GetSmsTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateServices_GetSmsTemplateById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServicesServer).GetSmsTemplateById(ctx, req.(*GetAnSmsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateServices_ServiceDesc is the grpc.ServiceDesc for TemplateServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Templates.TemplateServices",
	HandlerType: (*TemplateServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmailTemplate",
			Handler:    _TemplateServices_CreateEmailTemplate_Handler,
		},
		{
			MethodName: "CreateSmsTemplate",
			Handler:    _TemplateServices_CreateSmsTemplate_Handler,
		},
		{
			MethodName: "EditEmailTemplate",
			Handler:    _TemplateServices_EditEmailTemplate_Handler,
		},
		{
			MethodName: "EditSmsTemplate",
			Handler:    _TemplateServices_EditSmsTemplate_Handler,
		},
		{
			MethodName: "GetEmailTemplateById",
			Handler:    _TemplateServices_GetEmailTemplateById_Handler,
		},
		{
			MethodName: "GetSmsTemplateById",
			Handler:    _TemplateServices_GetSmsTemplateById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AllTemplates",
			Handler:       _TemplateServices_AllTemplates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/Template.proto",
}
